name: zero-deployable-node-backend
description: 'zero module for a basic backend service running in kubernetes'
author: 'Commit'
zeroVersion: '>= 0.1.1'
commands:
  check: sh scripts/check.sh

dependsOn:
- zero-aws-eks-stack

template:
  strictMode: true
  delimiters:
    - '<%'
    - '%>'
  inputDir: 'templates'
  outputDir: 'backend-service'

requiredCredentials:
  - aws
  - circleci
  - github

parameters:
  - field: useExistingAwsProfile
    label: "Use credentials from an existing AWS profile?"
    options:
      "yes": "Yes"
      "no": "No"
    omitFromProjectFile: yes
  - field: profilePicker
    omitFromProjectFile: yes
    type: AWSProfilePicker
    conditions:
    - action: KeyMatchCondition
      whenValue: "yes"
      matchField: useExistingAwsProfile
  - field: accessKeyId
    label: AWS AccessKeyId
    envVarName: "AWS_ACCESS_KEY_ID"
    conditions:
    - action: KeyMatchCondition
      whenValue: "no"
      matchField: useExistingAwsProfile
  - field: secretAccessKey
    envVarName: "AWS_SECRET_ACCESS_KEY"
    label: AWS SecretAccessKey
    conditions:
    - action: KeyMatchCondition
      whenValue: "no"
      matchField: useExistingAwsProfile
  - field: githubAccessToken
    label: "Github API Key to setup your repository and optionally CI/CD"
    envVarName: GITHUB_ACCESS_TOKEN
  - field: region
    label: Select AWS Region
    options:
      "us-west-2": "us-west-2 (Oregon)"
      "us-east-1": "us-east-1 (N. Virginia)"
      "us-east-2": "us-east-2 (Ohio)"
  - field: productionHostRoot
    label: Production Root Host Name (e.g. mydomain.com) - this must be the root of the chosen domain, not a subdomain.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.{1})+[a-z]{2,}$'
      errorMessage: Invalid root domain name
  - field: productionFrontendSubdomain
    label: Production Frontend Host Name (e.g. app.)
    default: app.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: productionBackendSubdomain
    label: Production Backend Host Name (e.g. api.)
    default: api.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: stagingHostRoot
    label: Staging Root Host Name (e.g. mydomain-staging.com) - this must be the root of the chosen domain, not a subdomain.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.{1})+[a-z]{2,}$'
      errorMessage: Invalid root domain name
  - field: stagingFrontendSubdomain
    label: Staging Frontend Host Name (e.g. app.)
    default: app.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: stagingBackendSubdomain
    label: Staging Backend Host Name (e.g. api.)
    default: api.
    fieldValidation:
      type: regex
      value: '^([a-z0-9]+(-[a-z0-9]+)*\.)$'
      errorMessage: Invalid subdomain (cannot contain special chars & must end with a '.')
  - field: database
    label: Database engine to use (postgres)
    options:
      "postgres": "PostgreSQL"
      "mysql": "MySQL"
  - field: accountId
    label: AWS Account ID
    execute: aws sts get-caller-identity --query "Account" | tr -d '"'
  - field: randomSeed
    label: Random seed that will be shared between projects to come up with deterministic resource names
    execute: uuidgen | head -c 8
  - field: databaseName
    execute: echo "$projectName"| sed "s/[- ]//g"
  - field: fileUploads
    label: Enable file uploads using S3 and Cloudfront signed URLs? (Will require manual creation of a Cloudfront keypair in AWS)
    default: yes
    options:
      "yes": "Yes"
      "no": "No"
  - field: userAuth
    label: Enable user management using Kratos and authentication using the Oathkeeper access proxy?
    default: yes
    options:
      "yes": "Yes"
      "no": "No"
  - field: apiType
    label: What type of API do you want to expose?
    default: rest
    options:
      "rest": "REST API"
      "graphql": "GraphQL"
  - field: CIVendor
    label: Using either circleCI or github Actions to build / test your repository
    default: "circleci"
    options:
      "circleci": "CircleCi"
      "github-actions": "Github Actions"
  - field: circleciApiKey
    label: "Circle CI API Key to setup your CI/CD for repositories"
    envVarName: CIRCLECI_API_KEY
    conditions:
    - action: KeyMatchCondition
      matchField: CIVendor
      whenValue: "circleci"
conditions:
  - action: ignoreFile
    matchField: fileUploads
    whenValue: "no"
    data:
    - src/app/file
  - action: ignoreFile
    matchField: userAuth
    whenValue: "no"
    data:
    - src/middleware/auth
    - src/app/auth
    - src/mockauth.js
    - kubernetes/base/auth.yml
    - kubernetes/overlays/staging/auth.yml
    - kubernetes/overlays/production/auth.yml
  - action: ignoreFile
    matchField: apiType
    whenValue: "rest"
    data:
    - src/graphql
    - src/graphql.js
    - src/db/model/Trip.js
    - src/service/trip.js
  - action: ignoreFile
    matchField: apiType
    whenValue: "graphql"
    data:
    - src/app
    - src/app.js
  - action: ignoreFile
    matchField: CIVendor
    whenValue: "circleci"
    data:
    - .github/
  - action: ignoreFile
    matchField: CIVendor
    whenValue: "github-actions"
    data:
    - .circleci/
